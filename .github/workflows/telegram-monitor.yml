name: Monitor Telegram Channel

on:
  schedule:
    # Check every 30 minutes
    - cron: '*/30 * * * *'
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force full sync'
        required: false
        type: boolean
        default: false

jobs:
  check-telegram:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for new posts and edits
        id: telegram-check
        run: |
          # Read current offset to track new posts
          OFFSET=$(cat scripts/telegram-exporter/telegram-offset.txt 2>/dev/null || echo "0")
          echo "üìç Current offset: $OFFSET"
          
          # Query Bot API for updates
          RESPONSE=$(curl -s "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/getUpdates?offset=$OFFSET&timeout=10")
          
          echo "üîç Raw response status:"
          echo "$RESPONSE" | jq -r '.ok // "unknown"'
          
          # Extract new channel posts
          NEW_POSTS=$(echo "$RESPONSE" | jq -r '.result[]? | select(.channel_post != null) | .channel_post.message_id')

          # Extract edited channel posts  
          EDITED_POSTS=$(echo "$RESPONSE" | jq -r '.result[]? | select(.edited_channel_post != null) | .edited_channel_post.message_id')
          
          # Combine and deduplicate message IDs
          ALL_MESSAGE_IDS=$(echo -e "$NEW_POSTS\n$EDITED_POSTS" | grep -v '^$' | sort -u | tr '\n' ',' | sed 's/,$//')
          
          # FIX: Proper counting without double fallback
          if [ -n "$NEW_POSTS" ]; then
            NEW_COUNT=$(echo "$NEW_POSTS" | grep -c '^[0-9]')
          else
            NEW_COUNT=0
          fi
          
          if [ -n "$EDITED_POSTS" ]; then
            EDITED_COUNT=$(echo "$EDITED_POSTS" | grep -c '^[0-9]')
          else
            EDITED_COUNT=0
          fi
          
          echo "üìù New posts: $NEW_COUNT, Edited posts: $EDITED_COUNT"
          echo "üéØ Combined message IDs: $ALL_MESSAGE_IDS"
          # Clean and validate all variables before writing to GITHUB_OUTPUT          
          if [ -n "$ALL_MESSAGE_IDS" ] || [ "${{ github.event.inputs.force_sync }}" == "true" ]; then
            echo "needs_export=true" >> $GITHUB_OUTPUT
            echo "message_ids=$ALL_MESSAGE_IDS" >> $GITHUB_OUTPUT
            echo "new_count=$NEW_COUNT" >> $GITHUB_OUTPUT  
            echo "edited_count=$EDITED_COUNT" >> $GITHUB_OUTPUT
            
            # Store response for later use in temp file
            echo "$RESPONSE" > /tmp/telegram_response.json
            
            echo "‚úÖ Updates detected - proceeding to export"
          else
            echo "needs_export=false" >> $GITHUB_OUTPUT
            echo "‚ùå No new posts or edits"
          fi

      - name: Early exit summary
        if: steps.telegram-check.outputs.needs_export == 'false'
        run: |
          echo "üèÉ‚Äç‚ôÇÔ∏è Early exit: No updates found"

      - name: Set up Python
        if: steps.telegram-check.outputs.needs_export == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'scripts/telegram-exporter/requirements.txt'

      - name: Install dependencies
        if: steps.telegram-check.outputs.needs_export == 'true'
        run: |
          echo "üîß Installing Python dependencies (only when needed)"
          pip install -r scripts/telegram-exporter/requirements.txt

      - name: Export Telegram posts to Hugo
        if: steps.telegram-check.outputs.needs_export == 'true'
        run: |
          cd scripts/telegram-exporter
          
          if [ "${{ github.event.inputs.force_sync }}" == "true" ]; then
            # Force sync: export last 10 posts for compatibility
            echo "üîÑ Force sync: exporting last 10 posts"
            python export_telegram_to_hugo.py \
              --channel "${{ secrets.TELEGRAM_CHANNEL }}" \
              --api-id "${{ secrets.TELEGRAM_API_ID }}" \
              --api-hash "${{ secrets.TELEGRAM_API_HASH }}" \
              --out "../../content/posts" \
              --limit 10 \
              --remove-hashtags \
              --delete-session \
              --verbose
          else
            # Normal operation: export only specific updated posts
            MESSAGE_IDS="${{ steps.telegram-check.outputs.message_ids }}"
            echo "üéØ Targeted export: processing message IDs: $MESSAGE_IDS"
            
            # Fallback to limit-based export if message-ids not supported
            if python export_telegram_to_hugo.py --help | grep -q "\-\-message-ids"; then
              python export_telegram_to_hugo.py \
                --channel "${{ secrets.TELEGRAM_CHANNEL }}" \
                --api-id "${{ secrets.TELEGRAM_API_ID }}" \
                --api-hash "${{ secrets.TELEGRAM_API_HASH }}" \
                --out "../../content/posts" \
                --message-ids "$MESSAGE_IDS" \
                --remove-hashtags \
                --delete-session \
                --verbose
            else
              echo "‚ö†Ô∏è Targeted export not yet implemented, using limit-based fallback"
              python export_telegram_to_hugo.py \
                --channel "${{ secrets.TELEGRAM_CHANNEL }}" \
                --api-id "${{ secrets.TELEGRAM_API_ID }}" \
                --api-hash "${{ secrets.TELEGRAM_API_HASH }}" \
                --out "../../content/posts" \
                --limit 5 \
                --remove-hashtags \
                --delete-session \
                --verbose
            fi
          fi

      - name: Update offset
        if: steps.telegram-check.outputs.needs_export == 'true'
        run: |
          # Update offset only if we had actual API updates (not force_sync)
          if [ -n "${{ steps.telegram-check.outputs.message_ids }}" ] && [ "${{ github.event.inputs.force_sync }}" != "true" ]; then
            # Read response from temp file instead of GitHub output
            if [ -f /tmp/telegram_response.json ]; then
              LAST_UPDATE_ID=$(cat /tmp/telegram_response.json | jq -r '.result[-1].update_id // "0"')
              if [ "$LAST_UPDATE_ID" != "null" ] && [ "$LAST_UPDATE_ID" != "0" ]; then
                NEXT_OFFSET=$((LAST_UPDATE_ID + 1))
                echo $NEXT_OFFSET > scripts/telegram-exporter/telegram-offset.txt
                echo "üìù Offset updated to: $NEXT_OFFSET"
              else
                echo "üìù No valid update_id found"
              fi
            fi
          else
            echo "üìù Offset unchanged"
          fi

      - name: Check for content changes
        id: changes
        if: steps.telegram-check.outputs.needs_export == 'true'
        run: |
          if [ -n "$(git status --porcelain content/posts/)" ]; then
            NEW_COUNT=$(git status --porcelain content/posts/ | grep -c "^A" || true)
            MODIFIED_COUNT=$(git status --porcelain content/posts/ | grep -c "^M" || true)
            
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "new_posts_count=${NEW_COUNT:-0}" >> $GITHUB_OUTPUT
            echo "modified_posts_count=${MODIFIED_COUNT:-0}" >> $GITHUB_OUTPUT
            
            echo "‚úÖ Content changes detected"
            echo "üìä Changes: ${NEW_COUNT:-0} new, ${MODIFIED_COUNT:-0} modified"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No content changes"
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "telegram-bot@github-actions.com"
          git config --local user.name "Telegram Export Bot"
          
          # Stage all changes
          git add content/posts/
          git add scripts/telegram-exporter/telegram-offset.txt
          
          # Create informative commit message
          NEW_COUNT="${{ steps.changes.outputs.new_posts_count }}"
          MODIFIED_COUNT="${{ steps.changes.outputs.modified_posts_count }}"
          API_NEW="${{ steps.telegram-check.outputs.new_count }}"
          API_EDITED="${{ steps.telegram-check.outputs.edited_count }}"
          
          if [ "${{ github.event.inputs.force_sync }}" == "true" ]; then
            COMMIT_TYPE="üîÑ Force sync from Telegram"
          else
            COMMIT_TYPE="ü§ñ Auto-sync from Telegram"
          fi
          
          git commit -m "$COMMIT_TYPE: $NEW_COUNT new, $MODIFIED_COUNT updated" \
                     -m "API updates: $API_NEW new posts, $API_EDITED edited posts" \
                     -m "Files: $NEW_COUNT added, $MODIFIED_COUNT modified" \
                     -m "UTC time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" \
                     -m "Source: ${{ secrets.TELEGRAM_CHANNEL }}"
          
          git push

      - name: Trigger Hugo site rebuild
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          # Send repository_dispatch to trigger deployment
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{
              "event_type": "telegram_content_updated",
              "client_payload": {
                "new_posts": "${{ steps.changes.outputs.new_posts_count }}",
                "modified_posts": "${{ steps.changes.outputs.modified_posts_count }}",
                "api_new": "${{ steps.telegram-check.outputs.new_count }}",
                "api_edited": "${{ steps.telegram-check.outputs.edited_count }}",
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
              }
            }'